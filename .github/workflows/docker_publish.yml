name: Build and Push Custom Overleaf (ARM64)

on:
  schedule:
    - cron: '0 0 * * 0'  # EjecuciÃ³n semanal
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # ConfiguraciÃ³n inicial
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Clone Overleaf
        run: git clone --depth 1 https://github.com/overleaf/overleaf.git

      - name: Set up ARM64 build
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx with cache
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            cache-from=type=gha
            cache-to=type=gha,mode=max

      # ConfiguraciÃ³n de versiÃ³n
      - name: Get version
        id: version
        run: |
          git clone --depth 1 https://github.com/overleaf/toolkit.git
          echo "VERSION=$(cat toolkit/lib/config-seed/version)" >> $GITHUB_ENV

      # AutenticaciÃ³n
      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Cache de dependencias
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/buildx
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # ConstrucciÃ³n de la imagen base
      - name: Build and push sharelatex-base
        run: |
          cd overleaf
          docker buildx build \
            --platform linux/arm64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --tag pibsas/sharelatex-base:arm64 \
            --tag pibsas/sharelatex-base:${{ env.VERSION }} \
            --tag pibsas/sharelatex-base:latest \
            --push \
            -f server-ce/Dockerfile-base \
            .

      # AplicaciÃ³n de tus modificaciones
      - name: Apply customizations
        run: |
          cd overleaf/server-ce
          # 1. Usar tu imagen base
          sed -i 's|^FROM .*|FROM pibsas/sharelatex-base:arm64|' Dockerfile
          
          # 2. Paquetes en espaÃ±ol
          awk '/^EXPOSE/ {
              print;
              print "# Paquetes para espaÃ±ol (custom)";
              print "RUN apt-get update && apt-get install -y hunspell-es && \\";
              print "    tlmgr update --self && \\";
              print "    tlmgr install babel-spanish hyphen-spanish collection-langspanish newunicodechar float jknapltx tools collection-mathscience mathtools amsmath amsfonts enumitem cancel microtype tcolorbox && \\";
              print "    tlmgr update --all && \\";
              print "    apt-get clean && \\";
              print "    rm -rf /var/lib/apt/lists/*";
              next
          }1' Dockerfile > Dockerfile.tmp && mv Dockerfile.tmp Dockerfile

      # ConstrucciÃ³n de la imagen principal
      - name: Build and push main image
        run: |
          cd overleaf
          docker buildx build \
            --platform linux/arm64 \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --push \
            --tag pibsas/sharelatex:${{ env.VERSION }} \
            --tag pibsas/sharelatex:latest \
            -f server-ce/Dockerfile \
            .

      # VerificaciÃ³n final
      - name: Verify pushed images
        run: |
          echo "âœ… ImÃ¡genes subidas correctamente:"
          echo " - Base: pibsas/sharelatex-base:arm64"
          echo " - Main: pibsas/sharelatex:${{ env.VERSION }}"
          
          echo "ðŸ“¦ Tags disponibles en Docker Hub:"
          curl -s "https://hub.docker.com/v2/repositories/pibsas/sharelatex/tags/?page_size=10" | \
            jq -r '"sharelatex: " + (.results[].name | select(. != "latest"))'
          
          curl -s "https://hub.docker.com/v2/repositories/pibsas/sharelatex-base/tags/?page_size=10" | \
            jq -r '"sharelatex-base: " + (.results[].name | select(. != "latest"))'

      # Limpieza
      - name: Clean up
        if: always()
        run: |
          docker builder prune -f
          docker system prune -f
